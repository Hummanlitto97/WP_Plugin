import { DataTable } from "../../../../JS/VanillaTable";
import HE from "../../../../JS/HTMLExtended";
import SE from "../../../../JS/StringExtended";

const TABLE_LIMIT = 4;
const TABLE_MANDATORY_FIELDS_COUNT = 3;
const TABLE_ID = "WP_Plugin_UserTable";
const LOADING_SVG = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; background: none; \
display: block; shape-rendering: auto;" width="177px" height="177px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">\
<circle cx="50" cy="50" r="34" stroke-width="8" stroke="#85a2b6" stroke-dasharray="53.40707511102649 53.40707511102649" fill="none" stroke-linecap="round">\
  <animateTransform attributeName="transform" type="rotate" dur="1.3513513513513513s" repeatCount="indefinite" keyTimes="0;1" values="0 50 50;360 50 50"></animateTransform>\
</circle>\
<circle cx="50" cy="50" r="25" stroke-width="8" stroke="#bbcedd" stroke-dasharray="39.269908169872416 39.269908169872416" stroke-dashoffset="39.269908169872416" fill="none" stroke-linecap="round">\
  <animateTransform attributeName="transform" type="rotate" dur="1.3513513513513513s" repeatCount="indefinite" keyTimes="0;1" values="0 50 50;-360 50 50"></animateTransform>\
</circle>\
<!-- [ldio] generated by https://loading.io/ --></svg>';
const STYLES = 
{
    "Ignore":
    {
        "pointer-events":"none"
    },
    "Container":
    {
        "position":"absolute",
        "width":"100%",
        "height":"auto",
        "display":"flex",
        "justify-content":"center"
    },
    "Loading":
    {
        "margin":"auto",
        "width":"50vw",
        "height":"50vh",
        "animation":"LoadingIn 1.6s ease forwards"
    },
    "LoadingOver":
    {
        "animation":"LoadingIn 1.6s ease forwards"
    },
    "Show":
    {
        "animation":"FadingIn 1.6s ease forwards"
    },
    "Hide":
    {
        "animation":"FadingOut 1.6s ease forwards"
    },
    "ToRelative":
    {
        "position":"relative"
    },
    "UserDetails":
    {
        "Wrapper":
        {
            "Container":
            {
                "transition":"width 2s",
                "width":"0%"
            },
            "Action":
            {
                "Show":
                {
                    "width":"50%"
                },
                "Hide":
                {
                    "width":"0%"
                }
            }
        },
        "Data":
        {
            "Container":
            {
                "width":"100%",
                "display":"flex",
                "flex-direction":"column" 
            },
            "Header":
            {
                "text-align":"center"
            },
            "Action":
            {
                "Show":
                {
                    "width":"100%"
                }
            }
        }
    }
};
/**
 * Users model
 * @property {object} Table
 */
export default class Users
{
    constructor()
    {
        this.MainContent = document.getElementById("site-content");
        this.Table = {
            "Data":[],
            "Loading":false,
            "LoadingScreen":null,
            "DOMTable":null,
            "Class":null,
            "Head":
            {
                "Cells":[]
            },
            "DataScreen":
            {
                "Hidden":true,
                "Loading":false,
                "Data":null,
                "Error":false
            }
        };
    }
    PreparePropertyContainer(property,element,style)
    {
        if(this.Table[property] === null)
        {
            this.Table[property] = HE.NewElement(element,style);
            this.MainContent.appendChild(this.Table[property]);
        }
        else
        {
            this.Table[property].innerHTML = "";
        }
    }
    async StartLoading()
    {
        this.Table.Loading = true;
        if(this.Table.LoadingScreen === null)
        {
            this.PreparePropertyContainer("LoadingScreen","div",{...STYLES.Container,...STYLES.Ignore});
            let loadScreen = HE.NewElement("div",STYLES.Loading);
            loadScreen.innerHTML = LOADING_SVG;
            HE.SetStyle(this.Table.LoadingScreen,STYLES.Show);
            this.Table.LoadingScreen.appendChild(loadScreen);
        }
        else
        {
            HE.SetStyle(this.Table.LoadingScreen,STYLES.Hide);
        }
    }
    async StopLoading()
    {
        this.Table.Loading = false;
        HE.SetStyle(this.Table.LoadingScreen.children[0],STYLES.LoadingOver);
        HE.SetStyle(this.Table.LoadingScreen,STYLES.Hide);
    }
    async GetUsers()
    {
        this.StartLoading();
        fetch('https://jsonplaceholder.typicode.com/users')
        .then(async (response) => 
        {
            if(response.ok)
            {
                this.Table.Data = await response.json();
                this.DisplayUsers();
            }
            else
            {
                this.PreparePropertyContainer("DOMTable","div",STYLES.Container);
                this.CreateFullScreenMessage(this.Table.DOMTable,"Sorry, couldn't fetch your information",{},["ErrorMessage"]);
                this.StopLoading();
            }
        })
        .catch((err) => 
        {
            this.PreparePropertyContainer("DOMTable","div",STYLES.Container);
            this.CreateFullScreenMessage(this.Table.DOMTable,"Sorry, couldn't fetch your information. Reason: " + err.message,{},["ErrorMessage"]);
            this.StopLoading();
        });
    }
    async LoadUserData(event)
    {
        if(!this.Table.DataScreen.Loading)
        {
            this.Table.DataScreen.Loading = true;
        }
        else
        {
            return;
        }
        if(event.target.dataset.id === this.Table.DataScreen.Data && !this.Table.DataScreen.Hidden)
        {
            HE.SetStyle(this.Table.DOMTable.children[1].children[0],STYLES.Hide);
            HE.SetStyle(this.Table.DOMTable.children[1],STYLES.UserDetails.Wrapper.Action.Hide);
            this.Table.DataScreen.Error = false;
            this.Table.DataScreen.Hidden = true;
            this.Table.DataScreen.Data = null;
            this.Table.DataScreen.Loading = false;
            return;
        }
        else if(this.Table.DataScreen.Hidden)
        {
            HE.SetStyle(this.Table.DOMTable.children[1],STYLES.UserDetails.Wrapper.Action.Show);
            this.Table.DataScreen.Hidden = false;
        }
        this.Table.DataScreen.Data = event.target.dataset.id;
        fetch("https://jsonplaceholder.typicode.com/users/" + event.target.dataset.id)
        .then(async (res) => 
        {
            if(this.Table.DataScreen.Error)
            {
                HE.SetStyle(this.Table.DOMTable.children[1].children[0],STYLES.Hide);
            }
            this.Table.DataScreen.Error = false;
            this.Table.DOMTable.children[1].innerHTML = "";

            let detailedView = HE.NewElement("div",
            {
                "height":(document.querySelector("#" + TABLE_ID).getBoundingClientRect().height) + "px",
                "margin-top":document.querySelector(".dataTable-top").getBoundingClientRect().height + "px"
            },
            ["WP_Plugin-data-container"]);
            this.Table.DOMTable.children[1].appendChild(detailedView);
            res = await res.json();
            await this.IterateProperty(res,detailedView);
        })
        .catch((err) => 
        {
            if(!this.Table.DataScreen.Error)
            {
                this.Table.DataScreen.Error = true;
                this.Table.DOMTable.children[1].innerHTML = "";
                this.CreateFullScreenMessage(this.Table.DOMTable.children[1],"Sorry, couldn't fetch your information. Reason: " + err.message,{},["ErrorMessage"]);
            }
            HE.SetStyle(this.Table.DOMTable.children[1].children[0],STYLES.Show);
        });
        this.Table.DataScreen.Loading = false;
    }
    async IterateProperty(object,parent)
    {
        Object.keys(object).forEach((prop) => 
        {
            let field = HE.NewElement("div",{},["WP_Plugin-data-field"]);
            parent.appendChild(field);

            let fHead = HE.NewElement("div",{},["WP_Plugin-data-field-header"]);
            fHead.innerHTML = SE.ToUpperFirstLetter(prop);
            field.appendChild(fHead);
            if(Object.isExtensible(object[prop]) && !Array.isArray(object[prop]))
            {
                HE.SetStyle(fHead,STYLES.UserDetails.Data.Header);
                this.IterateProperty(object[prop],parent);
            }
            else
            {
                let fContent = HE.NewElement("div",{},["WP_Plugin-data-field-content"]);
                fContent.innerHTML = object[prop];
                field.appendChild(fContent);
            }
            HE.SetStyle(field,STYLES.UserDetails.Data.Action.Show);
        });
    }
   /* async ScreenDataLoad()
    {
        let Table = this.Table;
        let style = Table.DOMTable.children[1]
        if(Table.DataScreen.Hidden)
        {
            HE.SetStyle(Table.DOMTable.children[1],STYLES.UserDetails.Show);
        }
                if(Table.DataScreen.Error)
                {
                    HE.SetStyle(Table.DOMTable.children[1],STYLES.UserDetails.Show).animation.onfinished = async () => 
                    {
                        (await this.CreateFullScreenMessage(this.Table.DOMTable.children[1],"Sorry, couldn't fetch your information",STYLES.ErrorMessage))
                        .style.animation.onfinished = async () => 
                        {
                            Table.DataScreen.Loading = false;
                        };
                    }
                }
                else
                {

                }
            }
            else
            {

            }
    }*/
    async DisplayUsers()
    {
        this.PreparePropertyContainer("DOMTable","div",STYLES.Container);
        if(Array.isArray(this.Table.Data) && this.Table.Data.length > 0)
        {
            await this.PrepareTable();
            let tableBody = this.Table.DOMTable.children[0].children[1];
            let t = 0;
            this.Table.Data.forEach((user) => 
            {
                let firstProp = null;
                let total = 0;
                let tr = HE.NewElement("tr");
                Object.keys(user).forEach((property) => 
                {
                    if(total === 0)
                    {
                        firstProp = property;
                    }
                    if(total >= TABLE_LIMIT || Object.isExtensible(user[property]) && !Array.isArray(user[property]))
                    {
                        return;
                    }
                    let td = HE.NewElement("td");
                    if(total < TABLE_MANDATORY_FIELDS_COUNT)
                    {
                        let link = HE.NewElement("a");
                        link.innerHTML = user[property];
                        link.setAttribute("data-id",user[firstProp]);
                        link.addEventListener("click",() => {console.log("1");});
                        t = link;
                        td.appendChild(link);
                    }
                    else
                    {
                        td.innerHTML = user[property];
                    }
                    tr.appendChild(td);
                    total++;
                });
                tableBody.appendChild(tr);
            });
            HE.SetStyle(this.Table.DOMTable,STYLES.ToRelative);
            this.StopLoading();
            this.Table.Class = new DataTable("#"+TABLE_ID);
            let userDetailFunction = this.LoadUserData.bind(this);
            this.Table.Class.on("datatable.init", function(e) 
            {
                Array.from(document.querySelector("#"+TABLE_ID).children[1].children).forEach(
                    (tr) => 
                    {
                        Array.from(tr.children).forEach(
                            (td) => 
                            {
                                if(td.children.length > 0)
                                {
                                    td.children[0].addEventListener("click",userDetailFunction);
                                }
                            });
                    });
            });
        }
        else
        {
            this.CreateFullScreenMessage(this.Table.DOMTable,"Sorry, couldn't fetch your information",{},["ErrorMessage"]);
            this.StopLoading();
        }
    }
    async CreateFullScreenMessage(callingObject,message,style=
                                    {
                                        "background":"transparent",
                                        "color":"black",
                                        "border":"none"
                                    })
    {
        let domMessage = HE.NewElement("p",style)
        domMessage.innerHTML = message;
        HE.SetStyle(callingObject,STYLES.Show);
        callingObject.appendChild(domMessage);
        return domMessage;
    }
    PreapreTableHeader()
    {
        let data = this.Table.Data;
        let cells = this.Table.Head.Cells;
        if(Array.isArray(data) && data.length > 0 )
        {
            let tr = HE.NewElement("tr");
            Object.keys(data[0]).
            forEach((property) => 
            {
                if(cells.length >= TABLE_LIMIT || Object.isExtensible(data[0][property]) && !Array.isArray(data[0][property]))
                {
                    return;
                }
                else
                {
                    let th = HE.NewElement("th");
                    th.innerHTML = SE.ToUpperFirstLetter(property);
                    tr.appendChild(th);
                    cells.push(property);
                }
            });
            this.Table.DOMTable.children[0].children[0].appendChild(tr);
        }
    }
    async PrepareTable()
    {
        let table = HE.NewElement("table");
        table.id = TABLE_ID;
        table.className = TABLE_ID;
        table.appendChild(HE.NewElement("thead"));
        table.appendChild(HE.NewElement("tbody"));
        this.Table.DOMTable.appendChild(table);
        this.Table.DOMTable.appendChild(HE.NewElement("div",{},["WP_Plugin_data-screen"]));
        this.PreapreTableHeader();
    }
}